import pandas as pd
import numpy as np
import os
import csv
from hmmlearn import hmm

class AiRecommendedMarkovModels:
    def __init__(self):
        pass

    def NonnegativeCheck(self):
        with open('Markov models.csv', 'r') as f:
            reader = csv.reader(f)
            next(reader)  # Skip the header row
            for row in reader:
                if any(float(x) < 0 for x in row[3:]):
                    print('Symbol counts should be non-negative integers.')
                    break
            else:
                print('All symbol counts in your CSV file are non-negative.')

    def generate_models(self):
        data = pd.read_csv('Markov models.csv')
        X = data[['TX Time (ms)', 'P00', 'P01', 'P10', 'P11']].values

        model = hmm.GaussianHMM(n_components=2, n_iter=1000)
        model.fit(X)

        # Generate new Markov models using the trained model
        new_models = []
        for i in range(10):
            # Generate a new sequence of hidden states
            hidden_states = model.predict(X)

            # Generate a new sequence of observations
            observations = model.sample(X.shape[0])[0]

            # Compute transition and emission probabilities from new sequences
            tx = round(np.sum((hidden_states[:-1] == 0) & (hidden_states[1:] == 0)) / np.sum(hidden_states[:-1] == 0), 2)
            P00 = round(np.sum((hidden_states[:-1] == 0) & (hidden_states[1:] == 0)) / np.sum(hidden_states[:-1] == 0), 2)
            P01 = round(np.sum((hidden_states[:-1] == 0) & (hidden_states[1:] == 1)) / np.sum(hidden_states[:-1] == 0), 2)
            P10 = round(np.sum((hidden_states[:-1] == 1) & (hidden_states[1:] == 0)) / np.sum(hidden_states[:-1] == 1), 2)
            P11 = round(np.sum((hidden_states[:-1] == 1) & (hidden_states[1:] == 1)) / np.sum(hidden_states[:-1] == 1), 2)

            new_models.append(
                {'Title': f'Model {i + 1}', 'Description': f'This is a new Markov model generated by the AI algorithm.',
                 'TX Time (ms)': tx, 'P00': P00, 'P01': P01, 'P10': P10, 'P11': P11})

        new_data = pd.DataFrame(new_models)
        new_data.to_csv('AI recommended Markov models.csv', index=False)

        print("New Markov models generated and saved to 'AI recommended Markov models.csv'!")


    def CreateAImodelsinifiles(self):
        # Create the AIModels directory if it doesn't exist
        if not os.path.exists('AIModels'):
            os.makedirs('AIModels')

        # Read the AI recommended Markov models from the CSV file
        with open('AI recommended Markov models.csv', mode='r') as csv_file:
            csv_reader = csv.DictReader(csv_file)
            for row in csv_reader:
                # Extract the values from the row
                title = row['Title']
                description = row['Description']
                tx_time = row.get('TX Time (ms)', '')
                p00 = row['P00']
                p01 = row['P01']
                p10 = row['P10']
                p11 = row['P11']

                # Create an INI file with the extracted values
                with open(f'AIModels/{title}.ini', mode='w') as ini_file:
                    ini_file.write(f'title={title}\n')
                    ini_file.write(f'description={description}\n')
                    ini_file.write(f'tx_time={tx_time}\n')
                    ini_file.write(f'p00={p00}\n')
                    ini_file.write(f'p01={p01}\n')
                    ini_file.write(f'p10={p10}\n')
                    ini_file.write(f'p11={p11}\n')

        print('INI files created successfully!')

